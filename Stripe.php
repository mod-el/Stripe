<?php namespace Model\Stripe;

use Model\Core\Module;

class Stripe extends Module
{
	/**
	 * For JS flow:
	 * Renders the stripe card input in the page and build Stripe token in real time
	 */
	public function renderForm()
	{
		$config = $this->retrieveConfig();
		?>
		<style>
			.StripeElement {
				box-sizing: border-box;

				height: 40px;

				padding: 10px 12px;

				border: 1px solid transparent;
				border-radius: 4px;
				background-color: white;

				box-shadow: 0 1px 3px 0 #e6ebf1;
				-webkit-transition: box-shadow 150ms ease;
				transition: box-shadow 150ms ease;
			}

			.StripeElement--focus {
				box-shadow: 0 1px 3px 0 #cfd7df;
			}

			.StripeElement--invalid {
				border-color: #fa755a;
			}

			.StripeElement--webkit-autofill {
				background-color: #fefde5 !important;
			}
		</style>

		<div class="form-row">
			<div id="card-element">
				<!-- A Stripe Element will be inserted here. -->
			</div>

			<!-- Used to display form errors. -->
			<div id="card-errors" role="alert"></div>

			<input type="hidden" name="stripeToken" id="stripeToken"/>
		</div>

		<script>
			var stripe, stripeCard;
			window.addEventListener('load', function () {
				stripe = Stripe('<?=$config['publishable-key']?>');
				var elements = stripe.elements();

				// Custom styling can be passed to options when creating an Element.
				// (Note that this demo uses a wider set of styles than the guide below.)
				var style = {
					base: {
						color: '#32325d',
						fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
						fontSmoothing: 'antialiased',
						fontSize: '16px',
						'::placeholder': {
							color: '#aab7c4'
						}
					},
					invalid: {
						color: '#fa755a',
						iconColor: '#fa755a'
					}
				};

				// Create an instance of the card Element.
				stripeCard = elements.create('card', {style: style});

				// Add an instance of the card Element into the `card-element` <div>.
				stripeCard.mount('#card-element');

				// Handle real-time validation errors from the card Element.
				stripeCard.addEventListener('change', function (event) {
					var displayError = document.getElementById('card-errors');
					if (event.error) {
						displayError.textContent = event.error.message;
					} else {
						displayError.textContent = '';

						// Generate the token Id
						stripe.createToken(stripeCard).then(function (result) {
							if (result.error) {
								// Inform the user if there was an error.
								displayError.textContent = result.error.message;
							} else {
								document.getElementById('stripeToken').value = result.token.id;
							}
						});
					}
				});
			});
		</script>
		<?php
	}

	/**
	 * For JS flow:
	 * To be called server-side, it SYNCHRONOUSLY charges the payment and returns a boolean wheter it succedeed or not
	 * It assumes that the token generated by the previous method comes in the $_POST['stripeToken'] variable, change it if that's not the case
	 *
	 * @param string $token
	 * @param array $options
	 * @return bool
	 */
	public function charge(array $options = []): bool
	{
		$options = array_merge([
			'description' => 'Acquisto da ' . APP_NAME,
			'currency' => 'eur',
			'amount' => 0,
			'source' => $_POST['stripeToken'],
		], $options);

		$options['amount'] *= 100;
		if ((int)$options['amount'] === 0)
			$this->model->error('Nothing to pay');

		$config = $this->retrieveConfig();

		\Stripe\Stripe::setApiKey($config['secret-key']);

		$charge = \Stripe\Charge::create($options);

		if ($charge and $charge->status)
			return true;
		else
			return false;
	}

	/**
	 * For the Stripe Checkout flow:
	 * it redirects to Stripe checkout page and then send the confirmation to the controller
	 *
	 * @param string $orderId
	 * @param array $options
	 */
	public function checkout(string $orderId, array $options = [])
	{
		$options = array_merge([
			'name' => 'Acquisto da ' . APP_NAME,
			'description' => '',
			'images' => [],
			'currency' => 'eur',
			'quantity' => 1,
			'amount' => 0,
		], $options);

		$options['amount'] *= 100;
		if ((int)$options['amount'] === 0)
			$this->model->error('Nothing to pay');

		if (!$options['description'])
			unset($options['description']);
		if (!$options['images'])
			unset($options['images']);

		$config = $this->retrieveConfig();

		\Stripe\Stripe::setApiKey($config['secret-key']);

		$session = \Stripe\Checkout\Session::create([
			'payment_method_types' => ['card'],
			'line_items' => [
				$options,
			],
			'success_url' => BASE_HOST . PATH . $config['success-path'],
			'cancel_url' => BASE_HOST . PATH . $config['cancel-path'],
			'client_reference_id' => $orderId,
		]);
		?>
		<script src="https://js.stripe.com/v3/" type="text/javascript"></script>
		<script>
			window.addEventListener('load', function () {
				var stripe = Stripe('<?=$config['publishable-key']?>');
				stripe.redirectToCheckout({
					sessionId: '<?=$session['id']?>'
				}).then(function (result) {
					if (typeof result.error.message !== 'undefined' && result.error.message)
						alert(result.error.message);
				});
			});
		</script>
		<?php
		die();
	}

	/**
	 * @param float $amount
	 * @param array $options
	 * @return string
	 */
	public function getPaymentIntent(float $amount, array $options = []): string
	{
		$config = $this->retrieveConfig();

		\Stripe\Stripe::setApiKey($config['secret-key']);

		$options = array_merge(['currency' => 'eur'], $options);
		$options = array_merge($options, ['amount' => $amount * 100]);

		$intent = \Stripe\PaymentIntent::create($options);

		return $intent->client_secret;
	}

	/**
	 * @param array $request
	 * @param string $rule
	 * @return array|null
	 */
	public function getController(array $request, string $rule): ?array
	{
		return $rule === 'stripe' ? [
			'controller' => 'Stripe',
		] : null;
	}
}
